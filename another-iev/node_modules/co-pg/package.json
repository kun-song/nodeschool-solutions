{
  "_args": [
    [
      {
        "raw": "co-pg@https://registry.npmjs.org/co-pg/-/co-pg-2.0.0.tgz",
        "scope": null,
        "escapedName": "co-pg",
        "name": "co-pg",
        "rawSpec": "https://registry.npmjs.org/co-pg/-/co-pg-2.0.0.tgz",
        "spec": "https://registry.npmjs.org/co-pg/-/co-pg-2.0.0.tgz",
        "type": "remote"
      },
      "/Users/satansk/Projects/github/koa-skeleton"
    ]
  ],
  "_from": "co-pg@2.0.0",
  "_id": "co-pg@2.0.0",
  "_inCache": true,
  "_location": "/co-pg",
  "_phantomChildren": {},
  "_requested": {
    "raw": "co-pg@https://registry.npmjs.org/co-pg/-/co-pg-2.0.0.tgz",
    "scope": null,
    "escapedName": "co-pg",
    "name": "co-pg",
    "rawSpec": "https://registry.npmjs.org/co-pg/-/co-pg-2.0.0.tgz",
    "spec": "https://registry.npmjs.org/co-pg/-/co-pg-2.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/co-pg/-/co-pg-2.0.0.tgz",
  "_shasum": "e41f0611053c038cbcae060eec996d14f5025a9a",
  "_shrinkwrap": null,
  "_spec": "co-pg@https://registry.npmjs.org/co-pg/-/co-pg-2.0.0.tgz",
  "_where": "/Users/satansk/Projects/github/koa-skeleton",
  "author": {
    "name": "BasicDays",
    "email": "info@basicdays.com",
    "url": "https://www.basicdays.com"
  },
  "bugs": {
    "url": "https://github.com/basicdays/co-pg/issues"
  },
  "dependencies": {
    "promissory": "^1.0.0"
  },
  "description": "Co wrapper for node-postgres",
  "devDependencies": {
    "chai": "^3.5.0",
    "co": "^4.0.0",
    "co-fs": "^1.2.0",
    "commander": "^2.5.0",
    "eslint": "^2.6.0",
    "jscs": "^2.11.0",
    "mocha": "^2.0.1",
    "pg": "^4.5.2",
    "pg-native": "^1.10.0",
    "pg.js": "^4.1.1"
  },
  "engines": {
    "node": "^0.12.0, ^4.0.0, ^5.0.0"
  },
  "homepage": "https://github.com/basicdays/co-pg",
  "keywords": [
    "async",
    "generator",
    "coroutine",
    "co",
    "postgresql",
    "postgres",
    "pg"
  ],
  "license": "MIT",
  "main": "./lib",
  "name": "co-pg",
  "optionalDependencies": {},
  "readme": "# co-pg\n\n[Co](https://github.com/visionmedia/co) wrapper for [node-postgres](https://github.com/brianc/node-postgres).\nAlso supports ESNext's async/await.\n\n\n## Installation\n\n```\n$ npm install co-pg\n```\n\n\n## Overview\n\n`co-pg` provides higher order functions that will return a wrapped edition of `pg`. Everything that is available\nfrom `pg` is also available on `co-pg` with no alterations to the original API. The `pg` API methods that use a\ncallback style interface also have companion promise methods that are usable by `co` 4.0 and by ESNext async/await.\n\nSupports:\n\n- [node-postgres](https://github.com/brianc/node-postgres)\n- [node-pg-native](https://github.com/brianc/node-pg-native)\n- [node-postgres-pure](https://github.com/brianc/node-postgres-pure) (even though it has been deprecated)\n\nSupports Node Engines:\n\n- v0.12 (requires `--harmony` flag to work)\n- v4\n- v5\n\n\n## API Additions\n\n`co-pg` adds a few additional methods on top of the `pg` API.\n\n - `PG` prototype adds the `#connectAsync` method\n   - also includes `#connectPromise` which aliases `#connectAsync`\n - `Client` prototype adds the `#connectAsync` and `#queryAsync` methods\n   - also includes `#connectPromise` which aliases `#connectAsync`\n   - also includes `#queryPromise` which aliases `#queryAsync`\n\nThese methods behave exactly the same as their counter-parts, including their arguments, except instead of\nsupplying a callback, the promise is yielded. All the original methods are still available by using the\nsans-underscore methods. For documentation or help on how they work, please see the original project's documentation.\n\n## Examples\n\n### Single connection\n\nConnect to a postgres instance, run a query, and disconnect, using `co`.\n\n```js\nlet co = require('co');\nlet pg = require('co-pg')(require('pg'));\n\nlet connectionString = 'postgres://postgres:1234@localhost/postgres';\n\nco(function* connectExample() {\n\ttry {\n\t\tlet client = new pg.Client(connectionString);\n\t\tyield client.connectPromise();\n\n\t\tlet result = yield client.queryPromise('select now() as \"theTime\"');\n\t\tconsole.log(result.rows[0].theTime);\n\n\t\tclient.end();\n\t} catch (ex) {\n\t\tconsole.error(ex);\n\t}\n});\n```\n\n### Client pooling\n\nThe underlying pooling system is not altered. The companion thunk methods can be used instead. Since PG#Connect\nreturns multiple objects, the return value is an array of those results. They can then be manually destructured\ninto separate variables for cleaner code.\n\n```js\nlet co = require('co');\nlet pg = require('../')(require('pg'));\n\nlet connectionString = 'postgres://postgres:1234@localhost/postgres';\n\nco(function* poolExample() {\n\ttry {\n\t\tlet connectResults = yield pg.connectPromise(connectionString);\n\t\tlet client = connectResults[0];\n\t\tlet done = connectResults[1];\n\n\t\tlet result = yield client.queryPromise('select now() as \"theTime\"');\n\t\t//call `done()` to release the client back to the pool\n\t\tdone();\n\n\t\tconsole.log(result.rows[0].theTime);\n\t\tprocess.exit();\n\t} catch (ex) {\n\t\tconsole.error(ex.toString());\n\t}\n});\n```\n\n## Other projects\n\n- [brianc/node-postgres](https://github.com/brianc/node-postgres): the PostgreSQL driver\n- [brianc/node-pg-native](https://github.com/brianc/node-pg-native): the PostgreSQL drive using native bindings\n\n## License\nMIT\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/basicdays/co-pg.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "2.0.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "^0.12.0, ^4.0.0, ^5.0.0"
      },
      "pkgid": "co-pg@2.0.0"
    }
  ]
}
