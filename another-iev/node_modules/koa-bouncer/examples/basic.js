'use strict';

var m = require('multiline');
var koa = require('koa');

/////////////////////////////////////////////////

var app = koa();
var bouncer = require('../index');

app.use(require('koa-body')())
app.use(bouncer.middleware());

app.use(function*(next) {
  try {
    yield next;
  } catch(ex) {
    if (ex instanceof bouncer.ValidationError) {
      // ex.message will be the validation error message like 'Username taken'
      // ex.key will be the param name like 'uname'
      this.body = 'Error: ' + ex.message;
      //this.response.redirect('back');
      return;
    }
    throw ex;
  }
});

app.use(require('koa-router')(app));

var template = m(function() {/*
<form action="/test-1" method="post">
  text: <input type="text" name="text" value="foo">
  <br><button type="submit">Test 1</button>
</form>
*/});

app.get('/', function*() {
  this.body = template;
});

//
// POST /users
//
// Create new user
app.post('/users', function*() {

  // Validation

  try {
    this.validateBody('uname')
      .isNotEmpty('Username required')
      .trim()
      .isLength(3, 15 'Username must be 3-15 characters')
      .match(/^[a-z0-9 ]+$/i, 'Username must only contain a-z, 0-9, and spaces')
      .match(/[a-z]/i, 'Username must contain at least one letter (a-z)')
      .notMatch(/[ ]{2,}/, 'Username contains consecutive spaces')
      .checkNot(yield db.findUserByUname(this.valid.uname), 'Username taken');
    this.validateBody('email')
      .isNotEmpty('Email required')
      .trim()
      .isEmail('Email must be valid')
      .checkNot(yield db.findUserByEmail(this.valid.email), 'Email taken');
    this.validateBody('password2')
      .isNotEmpty('Password confirmation required');
    this.validateBody('password1')
      .isNotEmpty('Password required')
      .equal(this.valid.password2, 'Password confirmation must match');
  } catch(ex) {
    if (ex instanceof bouncer.ValidationError) {
      // ex.message will be the validation error message like 'Username taken'
      // ex.key will be the param name like 'uname'
      this.body = 'Error in param ' + ex.key + ': ' + ex.message;
      return;
    }
    throw ex;
  }

  // Validation success

  // ...
});

app.post('/test-1', function*() {
  this.validateBody('text')
    .notEmpty();
  this.body = this.request.body;
});

app.listen(3000);
console.log('Listening on 3000');
