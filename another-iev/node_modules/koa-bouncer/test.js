var koa = require('koa');

/////////////////////////////////////////////////

var Validator = require('./index').Validator;

Validator.prototype.isValidBitcoinAddress = function(tip) {
  // Will thread the tip through the nested assertions
  var tip = tip || 'Invalid Bitcoin address';

  this
    .isString(tip + '1')
    .tap(s => s.trim())
    // Must be alphanumeric from start to finish
    .match(/^[a-z0-9]+$/i, tip + '2')
    // But must not contain any of these chars
    .notMatch(/[0O1l]/, tip + '3');

  return this;
};

////////////////////////////////////////////////////////////

var app = koa();
var bouncer = require('./index');

//app.use(require('koa-body')());
app.use(bouncer.middleware());
app.use(require('koa-router')(app));

var catchBouncer = function*(next) {
  try {
    yield* next;
  } catch(err) {
    if (err instanceof bouncer.ValidationError) {
      console.log(err);
      throw err;
      return;
    }
    throw err;
  }
};

app.post('/test', function*() {
  this.validateQuery('uname')
    .try(() => {
      this.assert(false, 403);
    })
  this.body = 'ok'
});

app.post('/test/:addr', catchBouncer, function*() {
  this.validateParam('addr')
    .notEmpty('Bitcoin address required')
    .isValidBitcoinAddress();

  this.body = 'OK: ' + this.vals.addr;
});

app.post('/users', function*() {

  // Validation

  try {
    this.validateBody('uname')
      .notEmpty('Username required')
      .trim()
      .isLength(3, 15, 'Username must be 3-15 characters')
      .match(/^[a-z0-9 ]+$/i, 'Username must only contain a-z, 0-9, and spaces')
      .match(/[a-z]/i, 'Username must contain at least one letter (a-z)')
      .notMatch(/[ ]{2,}/, 'Username contains consecutive spaces');
    // Email is optional
    if (this.request.body.email) {
      this.validateBody('email')
        .notEmpty('Email required')
        .trim()
        .isEmail('Email must be valid');
    }
    this.validateBody('password2').notEmpty('Password confirmation required');
    this.validateBody('password1')
      .notEmpty('Password required')
      .eq(this.vals.password2, 'Password confirmation must match');
  } catch(ex) {
    if (ex instanceof bouncer.ValidationError) {
      // ex.bouncer is {
      //   key: String,     - Name of parameter, e.g. 'username'
      //   message: String  - Validation error message, e.g. 'Username is taken'
      // }
      this.status = 400;
      this.body = 'Error for ' + ex.bouncer.key + ': ' + ex.bouncer.message;
      return;
    }
    throw ex;
  }

  // Validation success

  this.body = this.vals;
});

var port = process.env.PORT || 3001;
app.listen(port);
console.log('Listening on', port);
